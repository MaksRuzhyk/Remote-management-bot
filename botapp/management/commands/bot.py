import django
from django.core.management.base import BaseCommand
from django.conf import settings
import os
import logging
from ...models import BotUser, Movie, Video
from aiogram import html
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command as SM
from aiogram import Router
from aiogram import F
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from aiogram.types import InputFile
import asyncio
import yt_dlp
from bs4 import BeautifulSoup
import requests
import re
from asgiref.sync import sync_to_async
from pathlib import Path

# output_folder = r'C:\Users\Maks\PycharmProjects\pythonProject2\FinallProject\RemoteAccess\temp_audio'
folder_path = Path.home() / "temp_audio"
folder_path.mkdir(parents=True, exist_ok=True)
output_folder = folder_path

#–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —é–∑–µ—Ä–∞ —ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î

logging.basicConfig(level=logging.INFO)
bot = Bot(token=settings.TELEGRAM_BOT_API_KEY)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞—î Telegram-–±–æ—Ç–∞'

    def handle(self, *args, **kwargs):
        logging.info('Starting bot...')
        asyncio.run(main())

    async def start_bot(self):
        dp.include_router(router)
        await dp.start_polling(bot)

class Form(StatesGroup):
    auth = State()
    action = State()
    search_query = State()

def save_user(user):
    user.save()

def password_set(user, password):
    user.set_password(password)
    user.save()

def chek_password(user, password):
    return user.check_password(password)

def save_movies(user, movie):
    user.favorite_movies.add(movie)

def save_videos(user, video):
    user.favorite_videos.add(video)

#–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏

@router.message(SM('start'))
async def start_bot(message: types.Message, state: FSMContext):

    telegram_id = message.from_user.id
    user, created = await sync_to_async(BotUser.objects.get_or_create, thread_sensitive=True)(telegram_id=telegram_id, defaults={
        'username': message.from_user.username,
        'full_name': message.from_user.full_name})

    if user.is_authenticated:
        await message.answer(f'–ü—Ä–∏–≤—ñ—Ç, {html.bold(html.quote(message.from_user.full_name))}', parse_mode=ParseMode.HTML)
        await show_main_menu(message)

    else:
        await state.set_state(Form.auth)
        del_message = await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É:")
        message_id = del_message.message_id
        await asyncio.sleep(2)




@router.message(Form.auth)
async def process_bot(message: types.Message, state: FSMContext):
    user, created = await sync_to_async(BotUser.objects.get_or_create, thread_sensitive=True)(telegram_id=message.from_user.id)
    if not created:
        await sync_to_async(password_set)(user, message.text)
    if await sync_to_async(chek_password)(user, message.text):
        print(user)
        user.is_authorized = True
        await sync_to_async(save_user)(user)

        await state.clear()
        await message.delete()
        await message.answer(f'–ü—Ä–∏–≤—ñ—Ç, {html.bold(html.quote(message.from_user.full_name))}', parse_mode=ParseMode.HTML)
        await show_main_menu(message)
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")



async def show_main_menu(message: types.Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='HdRezka', callback_data='films')
    keyboard.button(text='YouTube', callback_data='youtube')
    keyboard.button(text='Music', callback_data='music')
    keyboard.button(text='–£–ª—é–±–ª–µ–Ω–µ', callback_data='favorite')
    keyboard.button(text='Exit', callback_data='exit')
    keyboard.adjust(1)
    await message.answer('–í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:', reply_markup=keyboard.as_markup())

#–æ–±—Ä–æ–±–∫–∞ –∫–æ–ª–±–µ–∫—ñ–≤ –æ—Å–Ω–æ–≤–Ω–∏—Ö

@router.callback_query(F.data == 'music')
async def process_music(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ:')
    await state.set_state(Form.search_query)
    await state.update_data(action='music')

@router.callback_query(F.data == 'films')
async def process_films(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É:')
    await state.set_state(Form.search_query)
    await state.update_data(action='hdrezka')

@router.callback_query(F.data == 'youtube')
async def process_youtube(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer('–Ø–∫–µ –≤—ñ–¥–µ–æ –∑–Ω–∞–π—Ç–∏?:')
    await state.set_state(Form.search_query)
    await state.update_data(action='youtube')

#–ø—Ä–æ—Ü–µ—Å –ø–æ—à—É–∫—É —ñ –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –ø–æ—à—É–∫—É

@router.message(Form.search_query)
async def process_search(message: types.Message, state: FSMContext):

    search_text = message.text
    await asyncio.sleep(1.5)
    await message.delete()
    data = await state.get_data()
    action = data.get('action')

    if action == 'hdrezka':

        links = hd_rezka_search(search_text)

        name = 'https://hdrezka.ag/'

        if links:
            await message.answer(f'–®—É–∫–∞—é —Ñ—ñ–ª—å–º: {search_text}')

            for link in links:
                url = name + link
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text='–ü–µ—Ä–µ–≥–ª—è–¥ –Ω–∞ PC', callback_data=f'open_hdrezka:{link}')
                keyboard.button(text='–ü–µ—Ä–µ–≥–ª—è–¥ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ', url=url)
                keyboard.button(text='–î–æ–¥–∞—Ç–∏ –≤ "–£–ª—é–±–ª–µ–Ω–µ"', callback_data=f'save_movie:{link}')
                keyboard.adjust(1, 1)
                await message.answer(url, reply_markup=keyboard.as_markup())

        else:
            await message.answer('–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')

        await asyncio.sleep(2)
        await show_main_menu(message)

    elif action == 'youtube':
        links = youtube_search(search_text)

        if links:
            await message.answer(f'–ó–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º "{search_text}":')

            for link in links:
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text='–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞ –∫–æ–º–ø º—é—Ç–µ—Ä—ñ', callback_data=f'open_youtube:{link}')
                keyboard.button(text='–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ', url=link)
                keyboard.button(text='–î–æ–¥–∞—Ç–∏ –≤ "–£–ª—é–±–ª–µ–Ω–µ"', callback_data=f'save_video:{link}')
                keyboard.adjust(1, 1)
                await message.answer(link, reply_markup=keyboard.as_markup())

        else:
            await message.answer("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        await asyncio.sleep(2)
        await show_main_menu(message)

    elif action == 'music':
        title = search_music(search_text)
        if title:
            for name in title:
                keyboard = InlineKeyboardBuilder()
                keyboard.button(text='Download', callback_data=f'download:{name}')
                keyboard.adjust(1, 1)
                await message.answer(name , reply_markup=keyboard.as_markup())
        else:
            await message.answer("–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        await asyncio.sleep(2)
        await show_main_menu(message)

    await state.clear()

#–ø–æ—à—É–∫ –≤—ñ–¥–µ–æ —ñ —Ñ—ñ–ª—å–º—ñ–≤

def hd_rezka_search(query):
    url_hd_rezka = f'https://hdrezka.ag/search/?do=search&subaction=search&q={query.replace(" ", "+")}'

    headers = {
        'user-agent': 'Mozilla / 5.0(Windows NT 10.0;Win64;x64) AppleWebKit / 537.36(KHTML, likeGecko) Chrome / 128.0.0.0Safari / 537.36OPR / 114.0.0.0',}
    r = requests.get(url_hd_rezka, headers=headers)
    data = r.text
    soup = BeautifulSoup(data, 'lxml')
    films = soup.findAll('div', class_='b-content__inline_item-link')
    links = []

    for urls in films:
        a = urls.find('a', href=True).get('href')
        last_part = a.split('/')[-1]
        links.append(last_part)

    return links[:5]

def youtube_search(query):
    url_youtube = f'https://www.youtube.com/results?search_query={query.replace(" ", "+")}'

    headers = {
        'user-agent': 'Mozilla / 5.0(Windows NT 10.0;Win64;x64) AppleWebKit / 537.36(KHTML, likeGecko) Chrome / 128.0.0.0Safari / 537.36OPR / 114.0.0.0',}

    r = requests.get(url_youtube, headers=headers)
    send = BeautifulSoup(r.text, 'html.parser')
    search = send.findAll('script')
    key = '"videoId":"'
    data = re.findall(key + r'([^"]{11})', str(search))
    links = []
    seen_links = set()
    name = 'https://www.youtube.com/watch?v='

    for i in data:
        link = name + i
        if link not in seen_links:
            links.append(link)
            seen_links.add(link)

    return links[:5]


#–æ–±—Ä–æ–±–∫–∞ –∫–æ–ª–±–µ–∫—ñ–≤ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—Å–∏–ª–∞–Ω—å

@router.callback_query(F.data.startswith('download:'))
async def load_m(callback: CallbackQuery):
    await callback.message.delete()
    link = callback.data.split(':', 1)[1].strip()
    print(link)
    await callback.message.answer('–ó–∞—á–µ–∫–∞–π—Ç–µ...')
    file_path = os.path.join(output_folder, f"{link}.mp3")
    if os.path.exists(file_path):
        audio = FSInputFile(file_path)
        await callback.bot.send_audio(chat_id=callback.message.chat.id, audio=audio, caption="–û—Å—å –≤–∞—à–µ –∞—É–¥—ñ–æ üéµ")
        await show_main_menu(callback.message)
    elif not os.path.exists(file_path):
        await callback.message.answer('–©–µ –≤–∏–∫–æ–Ω—É—é –ø–æ—à—É–∫...')
        muz_download(link)
        if os.path.exists(file_path):
            audio = FSInputFile(file_path)
            await callback.bot.send_audio(chat_id=callback.message.chat.id, audio=audio, caption="–û—Å—å –≤–∞—à–µ –∞—É–¥—ñ–æ üéµ")
            await show_main_menu(callback.message)
    else:
        await callback.message.answer("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await show_main_menu(callback.message)

@router.callback_query(F.data.startswith('open_youtube:'))
async def open_on_PC(callback: CallbackQuery):
    link = callback.data.split(':', 1)[1].strip()
    print(link)
    await callback.message.answer(f"–í—ñ–¥–∫—Ä–∏–≤–∞—é –Ω–∞ –∫–æ–º–ø'—é—Ç–µ—Ä—ñ: {link}")
    os.system(f'start Opera "{link}"')


@router.callback_query(F.data.startswith('open_hdrezka:'))
async def open_film(callback: CallbackQuery):
    link = callback.data.split(':', 1)[1].strip()
    name = 'https://hdrezka.ag/'
    print(link)
    full_url = name + link
    await callback.message.answer(f"–í—ñ–¥–∫—Ä–∏–≤–∞—é –Ω–∞ –∫–æ–º–ø'—é—Ç–µ—Ä—ñ")
    os.system(f'start Opera "{full_url}"')

#–ø—Ä–æ—Ü–µ—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ '–£–ª—é–±–ª–µ–Ω–µ'

@router.callback_query(F.data == 'favorite')
async def show_favorite(callback: CallbackQuery):
    await callback.message.delete()
    user = await sync_to_async(BotUser.objects.get)(telegram_id=callback.from_user.id)
    favorite_mov = await sync_to_async(list)(user.favorite_movies.all())
    favorite_youtube = await sync_to_async(list)(user.favorite_videos.all())

    if len(favorite_mov) == 0 and len(favorite_youtube) > 0:

        await callback.message.answer("–í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ —Ñ—ñ–ª—å–º–∏:")
        await callback.message.answer("–¢—É—Ç –ø–æ–∫–∏—â–æ –ø–æ—Ä–æ–∂–Ω—å–æ.")
        await asyncio.sleep(2)
        await callback.message.answer("–í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ –≤—ñ–¥–µ–æ:")
        for video in favorite_youtube:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text='–í–∏–¥–∞–ª–∏—Ç–∏', callback_data=f'delete_video:{video.id}')
            await callback.message.answer(video.url, reply_markup=keyboard.as_markup())

    elif len(favorite_mov) > 0 and len(favorite_youtube) == 0:

        await callback.message.answer("–í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ —Ñ—ñ–ª—å–º–∏:")
        for link in favorite_mov:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text='–í–∏–¥–∞–ª–∏—Ç–∏', callback_data=f'delete_movie:{link.id}')
            keyboard.adjust(1, 1)
            await callback.message.answer(f'"{link.title}":{link.url}', reply_markup=keyboard.as_markup())
        await asyncio.sleep(2)
        await callback.message.answer("–í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ –≤—ñ–¥–µ–æ: ")
        await callback.message.answer("–¢—É—Ç –ø–æ–∫–∏—â–æ –ø–æ—Ä–æ–∂–Ω—å–æ.")

    elif len(favorite_youtube) == 0 and len(favorite_mov) == 0:

        await callback.message.answer('–¢—É—Ç —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤ —Ç–∞ –≤—ñ–¥–µ–æ.')

    else:
        await callback.message.answer("–í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ —Ñ—ñ–ª—å–º–∏:")
        for link in favorite_mov:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text='–í–∏–¥–∞–ª–∏—Ç–∏', callback_data=f'delete_movie:{link.id}')
            keyboard.adjust(1, 1)
            await callback.message.answer(f'"{link.title}":{link.url}', reply_markup=keyboard.as_markup())
        await asyncio.sleep(2)
        await callback.message.answer("–í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ –≤—ñ–¥–µ–æ:")
        for video in favorite_youtube:
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text='–í–∏–¥–∞–ª–∏—Ç–∏', callback_data=f'delete_video:{video.id}')
            await callback.message.answer(video.url, reply_markup=keyboard.as_markup())

    await asyncio.sleep(2)
    await show_main_menu(callback.message)

#–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—à—É–∫—É

@router.callback_query(F.data.startswith('save_video:'))
async def save_video(callback: CallbackQuery):
    link = callback.data.split(':', 1)[1].strip()
    print(link)
    video, created = await sync_to_async(Video.objects.get_or_create)(url=link)
    user = await sync_to_async(BotUser.objects.get)(telegram_id=callback.from_user.id)
    await sync_to_async(save_videos)(user, video)
    await callback.message.answer('–í—ñ–¥–µ–æ –¥–æ–¥–∞–Ω–æ!')

#saved hdrezka search

@router.callback_query(F.data.startswith('save_movie:'))
async def save_movie(callback: CallbackQuery):
    link = callback.data.split(':', 1)[1].strip()
    name = 'https://hdrezka.ag/'
    full_url = name + link

    headers = {
        'user-agent': 'Mozilla / 5.0(Windows NT 10.0;Win64;x64) AppleWebKit / 537.36(KHTML, likeGecko) Chrome / 128.0.0.0Safari / 537.36OPR / 114.0.0.0',}

    r = requests.get(full_url, headers=headers)
    data = r.text
    soup = BeautifulSoup(data, 'lxml')
    title = soup.h1.text.strip()
    movie, created = await sync_to_async(Movie.objects.get_or_create)(url=full_url, defaults={'title': title})
    user = await sync_to_async(BotUser.objects.get)(telegram_id=callback.from_user.id)
    await sync_to_async(save_movies)(user, movie)
    await callback.message.answer('–§—ñ–ª—å–º –¥–æ–¥–∞–Ω–æ!')

#–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —É–ª—é–±–ª–µ–Ω–æ–≥–æ

@router.callback_query(F.data.startswith('delete_video:'))
async def delete_favorite_video(callback: CallbackQuery):
    await callback.message.delete()
    video_id = callback.data.split(':')[1]
    user = await sync_to_async(BotUser.objects.get)(telegram_id=callback.from_user.id)
    video = await sync_to_async(Video.objects.get)(id=video_id)
    await sync_to_async(user.favorite_videos.remove)(video)
    await callback.message.answer("–í—ñ–¥–µ–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö!")

@router.callback_query(F.data.startswith('delete_movie:'))
async def delete_favorite_movie(callback: CallbackQuery):
    await callback.message.delete()
    movie_id = callback.data.split(':')[1]
    print(movie_id)
    user = await sync_to_async(BotUser.objects.get)(telegram_id=callback.from_user.id)
    movie = await sync_to_async(Movie.objects.get)(id=movie_id)
    await sync_to_async(user.favorite_movies.remove)(movie)
    await callback.message.answer("–§—ñ–ª—å–º –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö!")

#search music

def search_music(query):
    search_url = f"ytsearch5:{query}"

    ydl_opts = {
        'quiet': True,
        'extract_flat': 'in_playlist',  # –û—Ç—Ä–∏–º—É—î –ª–∏—à–µ –º–µ—Ç–∞–¥–∞–Ω—ñ –≤—ñ–¥–µ–æ, –±–µ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    }

    titles = []

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            search_results = ydl.extract_info(search_url, download=False)

            for entry in search_results['entries']:
                video_info = entry.get('title')
                    # "url": f"https://www.youtube.com/watch?v={entry.get('id')}"
                titles.append(video_info)

        except Exception as e:
            print("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É:", e)

    return truncate_text_to_word(titles)

def truncate_text_to_word(results, max_length=30):
    res = []
    for result in results:
        if len(result) <= max_length:
            res.append(result)
        else:
            truncated = result[:max_length].rsplit(' ', 1)[0]  # –û–±—Ä—ñ–∑–∞—î –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ü—ñ–ª–æ–≥–æ —Å–ª–æ–≤–∞
            res.append(truncated)
    return res

def muz_download(search_query):
    search_url = f"ytsearch:{search_query}"
    ydl_opts = {
        'format': 'bestaudio/best',  # –≤–∏–±—ñ—Ä –Ω–∞–π–∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ –∞—É–¥—ñ–æ
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',  # –æ–±–∏—Ä–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç mp3
            'preferredquality': '320',  # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —è–∫—ñ—Å—Ç—å –∞—É–¥—ñ–æ
        }],
        'outtmpl': os.path.join(output_folder, f'{search_query}.%(ext)s'),
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([search_url])

#–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏

@router.callback_query(F.data == 'exit')
async def process_exit(callback: CallbackQuery):
    await callback.message.delete()
    user, created = await sync_to_async(BotUser.objects.get_or_create, thread_sensitive=True)(telegram_id=callback.from_user.id)
    user.is_authorized = False
    await sync_to_async(save_user)(user)
    await callback.message.answer("–°–µ—Å—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—é –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–æ–º!")



async def main():
    dp.include_router(router)
    await dp.start_polling(bot)